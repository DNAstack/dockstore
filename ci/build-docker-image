#!/usr/bin/env bash

if [ "$#" -lt 3 ]; then
        echo "USAGE: build-docker-image <target_image_name> <app_name> <app_version>"
        exit 1
fi

set -e
set -x
# This script runs the maven build, including unit tests, assembles a fat jar with
# embedded web server, and packages the resulting thing in a Docker image that runs
# the server on startup. The image is tagged with the string passed in as the first argument.

# This script is invoked during CI build with the following arguments:
target_image_name=$1
app_name=$2
app_version=$3

# This script does all its staging in a directory called target for easy cleanup and effective .gitignore.
docker_context_dir=ci/impl/target
rm -rf ${docker_context_dir}
mkdir -p ${docker_context_dir}/dockstore-webservice
mkdir -p ${docker_context_dir}/dockstore-common
mkdir -p ${docker_context_dir}/swagger-java-client
mkdir -p ${docker_context_dir}/openapi-java-client
mkdir -p ${docker_context_dir}/swagger-java-quay-client
mkdir -p ${docker_context_dir}/swagger-java-bitbucket-client
mkdir -p ${docker_context_dir}/swagger-java-sam-client
mkdir -p ${docker_context_dir}/swagger-java-discourse-client
mkdir -p ${docker_context_dir}/swagger-java-zenodo-client
mkdir -p ${docker_context_dir}/dockstore-language-plugin-parent
# Allows us to pass settings.xml configured on local machine or CI server to access private Nexus repo
mkdir -p ${docker_context_dir}/.m2
cp -rp .mvn mvnw pom.xml checkstyle*.xml ${docker_context_dir}
cp -a dockstore-webservice/src ${docker_context_dir}/dockstore-webservice/
cp -rp dockstore-webservice/pom.xml ${docker_context_dir}/dockstore-webservice
cp -rp dockstore-webservice/dockstore.yml ${docker_context_dir}/dockstore-webservice
cp -a dockstore-language-plugin-parent/src ${docker_context_dir}/dockstore-language-plugin-parent/
cp -rp dockstore-language-plugin-parent/pom.xml ${docker_context_dir}/dockstore-language-plugin-parent


cp -a swagger-java-client/src ${docker_context_dir}/swagger-java-client/
cp -rp swagger-java-client/pom.xml ${docker_context_dir}/swagger-java-client

cp -a openapi-java-client/src ${docker_context_dir}/openapi-java-client/
cp -rp openapi-java-client/pom.xml ${docker_context_dir}/openapi-java-client

#cp -a swagger-java-quay-client/src ${docker_context_dir}/swagger-java-quay-client/
cp -rp swagger-java-quay-client/pom.xml ${docker_context_dir}/swagger-java-quay-client
cp -rp swagger-java-quay-client/discovery.formatted.json ${docker_context_dir}/swagger-java-quay-client

#cp -a swagger-java-bitbucket-client/src ${docker_context_dir}/swagger-java-bitbucket-client/
cp -rp swagger-java-bitbucket-client/pom.xml ${docker_context_dir}/swagger-java-bitbucket-client
cp -rp swagger-java-bitbucket-client/swagger.yaml ${docker_context_dir}/swagger-java-bitbucket-client

#cp -a swagger-java-sam-client/src ${docker_context_dir}/swagger-java-sam-client/
cp -rp swagger-java-sam-client/pom.xml ${docker_context_dir}/swagger-java-sam-client

cp -a swagger-java-discourse-client/src ${docker_context_dir}/swagger-java-discourse-client/
cp -rp swagger-java-discourse-client/pom.xml ${docker_context_dir}/swagger-java-discourse-client

cp -a swagger-java-zenodo-client/src ${docker_context_dir}/swagger-java-zenodo-client
cp -rp swagger-java-zenodo-client/pom.xml ${docker_context_dir}/swagger-java-zenodo-client

cp -a dockstore-common/src ${docker_context_dir}/dockstore-common/
cp -rp dockstore-common/pom.xml ${docker_context_dir}/dockstore-common/

cp ~/.m2/*.xml ${docker_context_dir}/.m2

docker build \
  --build-arg APP_NAME=${app_name} \
  --build-arg APP_VERSION=${app_version} \
  -t ${target_image_name} \
  ci/impl